> Task
-encapsulation over threading
-runs threads parallely
-TPL automatically uses code in multicore...unlike threads where all the functions try to run on a single core by time slicing or context switching.
-task does uses threads, but it adds just some extra logic to it.
- define: Task t1 = new Task (funName); t1.Start();
- in async/await  use Task as return type when your asynchronous method doesn't return a result, and use Task<T> as return type when it does.



> Thread
- define: Thread t1 = new Thread (new ThreadStart funName); t1.Start();


--------------------------------------------------------


> Async
.-here running fast(performance) is not the goal
.-concurrent...like threads...
.-working on 1 core
.-max utilization of resources
.-here tasks are corelated (like first do this..then wait..then do that..then wait..then do this ..then wait..then do that...then wait and so on)
.- eg : in web apis
.The reason you want to use async/await on a web server is that work will be done in its own 'world' (a thread) instead of sharing with the thread the web app is on.  Thus you can better serve lots of requests at the same time.
.
.
.
> Parallel
- when two tasks are not connected with each other.
- TPL
- performance is goal


-----------------------------------------------------------

> Delegates
-reference pointers of functions
-used to call function indirectly
-eg: we can call multiple functions of same signature with a same delegate.(eg: add fuc, sub fun, mult func, div fun).....basically encapsulation.......



.............................................................

>  Abstraction
-used to display only necessary features of an object to other classes.
-hiding the implementation details(body of methods) from the user , only providing functionanlity.
-user will have the info on what the object does instead of how it does.
-to represent the essential features without representing the background details.


> Abstract class
- we cant make object of abstract class and interface .
- we use its properties in child class using inheritence.
-we make objects of its child classes.
- eg: characteristics common in student and teacher class are declared in person(abstract) class... we make person class abstract because we dont need to create its object..we only need to create object of student, teacher etc..
- not support multiple inheritence. 
- can have constructors unlike interfaces..

> Abstract methods
- no body, no implementation. 
- child class will give body and implementation to this abstract method.
- if we dont give body to the abstract method in child class then it will make that child class an abstract class too.
- we use abstract method in child class using override keyword.



> Interface
- like abstract class. 
- all the members are by default abstract.
- only signature and declaration of members in interface.
- we implements from parent class, not inherit.
- use interface keyword.
- all the members are by default public
- can be used in multiple inheritence.
- interface doesnt have fields(variables )
- no constructor.
- we use interfaces in dependency injection.

- we can store object of child class in parent reference variable.
- eg : i1 obj1 = new MyClass();........................ here i1 is parent interface and MyClass is child class................mostly used for explicit implementation of interfaces...  
- we use this way to call methods of particular interface in an object of child class.